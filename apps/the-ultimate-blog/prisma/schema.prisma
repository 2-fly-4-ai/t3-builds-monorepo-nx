// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  email         String?   @unique
  emailVerified DateTime?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  name          String?
  shortDescription String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  portfolioUrl         String?
  githubUrl        String?
  LinkedInUrl        String?
  tech          Tech[]
  course         Course[]
  link            Link[]
  product         Product[]
  accounts      Account[]
  sessions      Session[]
  role           String             @default("user")
  bio            String?            @db.VarChar(160)
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  postBookmarks     PostBookMark[]
  techBookmarks TechBookMark[]
  courseBookMark CourseBookMark[]
  linkBookmark   LinkBookMark[]
  productBookMark ProductBookMark[]
  followedBy    User[]     @relation("UserFollows")
  followings    User[]     @relation("UserFollows")
  notified Notification[] @relation(name: "NotifiedNotification")
  notifier Notification[] @relation(name: "NotifierNotification")
  createdAt DateTime  @default(now())
  
}

model Notification {
  id         String   @id @default(cuid())
  postId     String?
  techId     String?
  linkId     String?
  courseId   String?
  productId  String?
  link       Link?        @relation(fields: [linkId], references: [id], onDelete: Cascade)
  product    Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  course     Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String?
  notifiedId String
  notified   User     @relation(name: "NotifiedNotification", fields: [notifiedId], references: [id], onDelete: Cascade)
  notifierId String
  notifier   User     @relation(name: "NotifierNotification", fields: [notifierId], references: [id], onDelete: Cascade)
  type       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([notifiedId])
  @@index([notifierId])
  @@index([postId])
  @@index([commentId])
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String    @id @default(cuid())
  title         String    @unique
  description   String
  slug          String    @unique
  featuredImage String?
  html          String?   @db.Text
  authorId      String?
  author        User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  tags          Tag[]
  likes         Like[]
  bookmarks     PostBookMark[]
  notifications Notification[]
   @@index([authorId])
}

model Link {
  id            String    @id @default(cuid())
  title         String    @unique
  description   String
  slug          String    @unique
  featuredImage String?
  link        String?   @db.Text
  authorId      String?
  author        User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  tags          linkTag[]
  likes         Like[]
  bookmarks     LinkBookMark[]
  notifications Notification[]
   @@index([authorId])
}

model Course {
  id            String    @id @default(cuid())
  title         String    @unique
  description   String
  slug          String    @unique
  featuredImage String?
  html          String?   @db.Text
  authorId      String?
  author        User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  tags          CourseTag[]
  likes         Like[]
  bookmarks     CourseBookMark[]
  notifications Notification[]
  @@index([authorId])
}

model Product {
  id            String    @id @default(cuid())
  title         String    @unique
  description   String
  slug          String    @unique
  featuredImage String?
  html          String?   @db.Text
  authorId      String?
  author        User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  tags          productTag[]
  likes         Like[]
  bookmarks     ProductBookMark[]
  notifications Notification[]
   @@index([authorId])
}
// WORKING

model Tech {
  id            String    @id @default(cuid())
  title         String    @unique
  shortDescription   String
  description String
  slug          String    @unique
  featuredImage String?
  html          String?   @db.Text

  authorId      String?
  docsUrl       String?
  webUrl        String?
  githubUrl     String?
  pricingUrl    String?
  author        User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[] 
  tags          TechTag[]
  likes         Like[]
  bookmarks     TechBookMark[]

  @@index([authorId])
}

model Comment {
  id        String    @id @default(cuid())
  userId    String
  postId    String?
  text      String
  techId    String?
  linkId    String?   
  courseId  String? 
  productId  String?
  product   Product[]
  user      User      @relation(fields: [userId], references: [id],onDelete: Cascade) 
  post      Post?      @relation(fields: [postId], references: [id],onDelete: Cascade)
  link      Link?      @relation(fields: [linkId], references: [id],onDelete: Cascade)
  tech      Tech?      @relation(fields: [techId], references: [id],onDelete: Cascade) 
  course     Course?      @relation(fields: [courseId], references: [id],onDelete: Cascade) 
  createdAt DateTime  @default(now())
  likes     Like[]    // new field
  notifications Notification[]
  @@index([userId])
  @@index([postId])

}

model Tag {
  id           String @id  @default(cuid())
  name         String @unique
  description  String?
  slug         String
  posts        Post[] 
}

model TechTag {
  id           String @id  @default(cuid())
  name         String @unique
  description  String?
  slug         String
  tech         Tech[]
}

model CourseTag {
  id           String @id  @default(cuid())
  name         String @unique
  description  String?
  slug         String
  course       Course[]
}

model productTag {
  id           String @id  @default(cuid())
  name         String @unique
  description  String?
  slug         String
  product       Product[]
}

model linkTag {
  id           String @id  @default(cuid())
  name         String @unique
  description  String?
  slug         String
  link       Link[]
}

model Like {
  id        String     @id @default(cuid())
  userId    String
  postId    String?
  productId String?
  commentId String?
  techId    String?
  linkId    String?
  courseId  String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  tech      Tech?      @relation(fields: [techId], references: [id], onDelete: Cascade)
  link      Link?      @relation(fields: [linkId], references: [id], onDelete: Cascade)
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@unique([userId, postId]) // unique constraint on post likes
  @@unique([userId, commentId])
  @@unique([userId, productId])
  @@unique([userId, techId])
   // unique constraint on comment likes
  @@index([postId])
}

model PostBookMark {
  id        String     @id @default(cuid())
  userId    String
  postId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post       @relation(fields: [postId], references: [id] , onDelete: Cascade )
  @@unique([userId, postId])
  @@index([postId])
  createdAt DateTime  @default(now())
}

model LinkBookMark {
  id        String     @id @default(cuid())
  userId    String
  linkId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  link      Link      @relation(fields: [linkId], references: [id] , onDelete: Cascade )
  @@unique([userId, linkId])
  @@index([linkId])
  createdAt DateTime  @default(now())
}


model TechBookMark {    
  id        String     @id @default(cuid())
  userId    String
  techId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tech      Tech       @relation(fields: [techId], references: [id], onDelete: Cascade)
 
  @@unique([userId, techId])
   @@index([techId])
  createdAt DateTime  @default(now())
}

model CourseBookMark {
  id        String     @id @default(cuid())
  userId    String
  courseId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
 
  @@unique([userId, courseId])
   @@index([courseId])
  createdAt DateTime  @default(now())
}

model ProductBookMark {
  id        String     @id @default(cuid())
  userId    String
  productId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
 
  @@unique([userId, productId])
   @@index([productId])
  createdAt DateTime  @default(now())
}
//This is a Prisma schema file, which is used to define the data models and database schema for a Prisma client. It starts with a generator block that specifies the provider for the client library that Prisma will generate. The datasource block defines the database provider and connection URL for the database. Following that are several model blocks that define the data models for the application.The Example model defines an example data model with an id field, a createdAt field, and an updatedAt field.

//The Account model is used for Next.js authentication and contains fields for authentication information such as the userId, type, provider, and providerAccountId. The Session model defines a data model for user sessions, containing fields for id, sessionToken, userId, and expires. The User model defines a data model for users, containing fields for id, name, email, emailVerified, image, as well as references to associated Account and Session models. The VerificationToken model defines a data model for verification tokens, containing fields for identifier, token, and expires. The @db.Text annotation is used to specify that a field should be mapped to a Text data type in the database.